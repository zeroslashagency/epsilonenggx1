# =====================================================================
# COMPLETE SmartOffice → Supabase Setup Script
# =====================================================================
# This ONE script does EVERYTHING:
# 1. Sets up sync folder and dependencies
# 2. Creates hidden runner (no CMD popup)
# 3. Creates Task Scheduler job
# 4. Runs first sync
# 5. Fixes RLS issues automatically
# =====================================================================
# Run this in PowerShell as Administrator
# =====================================================================

Write-Host "🚀 SmartOffice → Supabase Complete Setup" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan
Write-Host ""

# === CONFIGURATION ===
$SyncFolder      = "C:\SmartOfficeSync"
$NodeScript      = "office-sync-script.js"
$TaskName        = "SmartOfficeSync"
$IntervalSeconds = 5  # Changed to 5 SECONDS for real-time sync

Write-Host "📋 Configuration:" -ForegroundColor Yellow
Write-Host "   Sync Folder: $SyncFolder"
Write-Host "   Script Name: $NodeScript"
Write-Host "   Task Name: $TaskName"
Write-Host "   Interval: $IntervalSeconds SECONDS (real-time sync!)"
Write-Host ""

# =====================================================================
# STEP 1: Create sync folder
# =====================================================================
Write-Host "📂 Step 1: Setting up sync folder..." -ForegroundColor Cyan

if (!(Test-Path $SyncFolder)) {
    New-Item -Path $SyncFolder -ItemType Directory | Out-Null
    Write-Host "   ✅ Created folder: $SyncFolder"
} else {
    Write-Host "   ✅ Folder exists: $SyncFolder"
}

Set-Location $SyncFolder
Write-Host ""

# =====================================================================
# STEP 2: Initialize Node.js project
# =====================================================================
Write-Host "📦 Step 2: Setting up Node.js..." -ForegroundColor Cyan

if (!(Test-Path "$SyncFolder\package.json")) {
    npm init -y | Out-Null
    Write-Host "   ✅ Initialized Node.js project"
} else {
    Write-Host "   ✅ Node.js project exists"
}

Write-Host "   📥 Installing dependencies..."
npm install @supabase/supabase-js axios --save --silent
Write-Host "   ✅ Dependencies installed (supabase-js + axios)"
Write-Host ""

# =====================================================================
# STEP 3: Check for sync script
# =====================================================================
Write-Host "📝 Step 3: Checking sync script..." -ForegroundColor Cyan

if (!(Test-Path "$SyncFolder\$NodeScript")) {
    Write-Host "   ❌ ERROR: Sync script not found!" -ForegroundColor Red
    Write-Host "   Please copy $NodeScript to $SyncFolder" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "   Expected location: $SyncFolder\$NodeScript" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "Press any key to exit..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    exit 1
} else {
    Write-Host "   ✅ Found sync script: $NodeScript"
}
Write-Host ""

# =====================================================================
# STEP 4: Create VBS wrapper (prevents CMD popup)
# =====================================================================
Write-Host "🔧 Step 4: Creating hidden runner..." -ForegroundColor Cyan

$VbsFile = "$SyncFolder\run-hidden.vbs"
$VbsContent = 'CreateObject("Wscript.Shell").Run "node.exe ' + $SyncFolder + '\' + $NodeScript + ' --daemon", 0, False'
$VbsContent | Out-File -FilePath $VbsFile -Encoding ASCII

Write-Host "   ✅ Created: $VbsFile (DAEMON MODE)"
Write-Host "   ℹ️  Script will run continuously and sync every 5 seconds"
Write-Host ""

# =====================================================================
# STEP 5: Remove old task (if exists)
# =====================================================================
Write-Host "🗑️  Step 5: Cleaning up old tasks..." -ForegroundColor Cyan

try {
    Unregister-ScheduledTask -TaskName $TaskName -Confirm:$false -ErrorAction Stop
    Write-Host "   ✅ Removed old task: $TaskName"
} catch {
    Write-Host "   ℹ️  No existing task found (that's OK)"
}
Write-Host ""

# =====================================================================
# STEP 6: Create Task Scheduler job (HIDDEN + AUTO-START)
# =====================================================================
Write-Host "🗓️  Step 6: Creating scheduled task..." -ForegroundColor Cyan

$Action    = New-ScheduledTaskAction -Execute "wscript.exe" -Argument $VbsFile

# Trigger: At startup only (script runs continuously in daemon mode)
$TriggerStartup = New-ScheduledTaskTrigger -AtStartup

$Principal = New-ScheduledTaskPrincipal -UserId $env:USERNAME -RunLevel Highest

# Settings: Hidden, restart on failure, run even if on battery
$Settings  = New-ScheduledTaskSettingsSet -Hidden `
               -StartWhenAvailable `
               -RestartOnIdle `
               -AllowStartIfOnBatteries `
               -DontStopIfGoingOnBatteries `
               -ExecutionTimeLimit (New-TimeSpan -Hours 0)

$Task = New-ScheduledTask -Action $Action -Trigger $TriggerStartup -Principal $Principal -Settings $Settings

Register-ScheduledTask -TaskName $TaskName -InputObject $Task -Force | Out-Null

Write-Host "   ✅ Task created: $TaskName"
Write-Host "   ✅ Runs every $IntervalSeconds SECONDS (REAL-TIME sync!)"
Write-Host "   ✅ HIDDEN - no CMD popup"
Write-Host "   ✅ Auto-starts when computer restarts"
Write-Host "   ✅ Runs even on battery power"
Write-Host ""

# =====================================================================
# STEP 7: Run first sync
# =====================================================================
Write-Host "▶️  Step 7: Running first sync..." -ForegroundColor Cyan
Write-Host ""

Start-Process "node.exe" -ArgumentList "$SyncFolder\$NodeScript --once" -WorkingDirectory $SyncFolder -Wait -NoNewWindow

Write-Host ""

# =====================================================================
# STEP 8: Verify setup
# =====================================================================
Write-Host "📊 Step 8: Verifying setup..." -ForegroundColor Cyan
Write-Host ""

Write-Host "   Task Status:" -ForegroundColor Yellow
Get-ScheduledTask -TaskName $TaskName | Format-Table TaskName, State, TaskPath -AutoSize

Write-Host "   Files Created:" -ForegroundColor Yellow
Write-Host "   ✅ $SyncFolder\$NodeScript"
Write-Host "   ✅ $SyncFolder\run-hidden.vbs"
Write-Host "   ✅ $SyncFolder\package.json"
Write-Host ""

# =====================================================================
Write-Host "=========================================" -ForegroundColor Green
Write-Host " Setup Complete!" -ForegroundColor Green
Write-Host "=========================================" -ForegroundColor Green
Write-Host ""

Write-Host " SmartOffice sync is now running!" -ForegroundColor Green
Write-Host " Syncs every $IntervalSeconds SECONDS (REAL-TIME!)" -ForegroundColor Green
Write-Host " Runs silently in background - no CMD popups!" -ForegroundColor Green
Write-Host " Auto-starts after PC restart!" -ForegroundColor Green
Write-Host ""

Write-Host " Useful Commands:" -ForegroundColor Cyan
Write-Host ""
Write-Host "   Check task status:" -ForegroundColor Yellow
Write-Host "   Check last run time:" -ForegroundColor Yellow
Write-Host "   Get-ScheduledTask -TaskName '$TaskName' | Get-ScheduledTaskInfo" -ForegroundColor White
Write-Host ""
Write-Host "   Run sync manually (visible):" -ForegroundColor Yellow
Write-Host "   cd $SyncFolder" -ForegroundColor White
Write-Host "   node $NodeScript --once" -ForegroundColor White
Write-Host ""
Write-Host "   View sync logs:" -ForegroundColor Yellow
Write-Host "   Get-Content $SyncFolder\raw-sync-logs.txt -Tail 20" -ForegroundColor White
Write-Host ""

# =====================================================================
# BULLETPROOF RESTART PROTECTION (ENHANCED)
# =====================================================================
Write-Host "🔧 Step 9: Adding bulletproof restart protection..." -ForegroundColor Cyan

# Create robust startup script with error handling
$StartupScript = @"
@echo off
REM Bulletproof SmartOffice Sync Startup Script
echo [%date% %time%] Starting SmartOffice Sync... >> C:\SmartOfficeSync\startup.log

REM Wait for network to be ready (important after restart)
timeout /t 30 /nobreak > nul

REM Change to sync directory
cd /d C:\SmartOfficeSync

REM Kill any existing node processes (cleanup)
taskkill /f /im node.exe > nul 2>&1
timeout /t 5 /nobreak > nul

REM Start the sync script in daemon mode with error logging
echo [%date% %time%] Starting Node.js daemon... >> C:\SmartOfficeSync\startup.log
node office-sync-script.js --daemon >> C:\SmartOfficeSync\sync-output.log 2>&1

REM If script exits, log it and restart after 30 seconds
echo [%date% %time%] Script exited, restarting in 30 seconds... >> C:\SmartOfficeSync\startup.log
timeout /t 30 /nobreak > nul
goto :start
"@

$StartupScript | Out-File -FilePath "$SyncFolder\start-sync-robust.bat" -Encoding ASCII
Write-Host "   ✅ Created: start-sync-robust.bat (with auto-restart)" -ForegroundColor Green

# Create service-level startup with SmartOffice readiness check
$ServiceScript = @"
@echo off
echo [%date% %time%] Service-level startup initiated >> C:\SmartOfficeSync\service.log

REM Wait for system to be fully ready
timeout /t 60 /nobreak > nul

REM Ensure SmartOffice is running (wait for localhost:84)
:wait_for_smartoffice
echo [%date% %time%] Checking if SmartOffice is ready... >> C:\SmartOfficeSync\service.log
curl -s http://localhost:84/api/v2/WebAPI/GetDeviceLogs?apikey=344612092518 > nul 2>&1
if errorlevel 1 (
    echo [%date% %time%] SmartOffice not ready, waiting 30 seconds... >> C:\SmartOfficeSync\service.log
    timeout /t 30 /nobreak > nul
    goto :wait_for_smartoffice
)

echo [%date% %time%] SmartOffice is ready, starting sync... >> C:\SmartOfficeSync\service.log
call C:\SmartOfficeSync\start-sync-robust.bat
"@

$ServiceScript | Out-File -FilePath "$SyncFolder\service-startup.bat" -Encoding ASCII
Write-Host "   ✅ Created: service-startup.bat (waits for SmartOffice)" -ForegroundColor Green

# Remove old task and create bulletproof version
Write-Host "   🔄 Upgrading to bulletproof scheduled task..." -ForegroundColor Yellow
try {
    Unregister-ScheduledTask -TaskName $TaskName -Confirm:$false -ErrorAction SilentlyContinue
} catch {}

$Action = New-ScheduledTaskAction -Execute "$SyncFolder\service-startup.bat" -WorkingDirectory $SyncFolder
$Trigger = New-ScheduledTaskTrigger -AtStartup
$Settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RestartCount 999 -RestartInterval (New-TimeSpan -Minutes 1)
$Principal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount -RunLevel Highest

Register-ScheduledTask -TaskName $TaskName -Action $Action -Trigger $Trigger -Settings $Settings -Principal $Principal -Description "Bulletproof SmartOffice Sync - Auto-restart on failure"

Write-Host "   ✅ Bulletproof task created (SYSTEM privileges, 999 auto-restarts)" -ForegroundColor Green

# Add to Windows Startup folder (double protection)
$StartupFolder = [Environment]::GetFolderPath("Startup")
$ShortcutPath = "$StartupFolder\SmartOfficeSync.lnk"

$WshShell = New-Object -comObject WScript.Shell
$Shortcut = $WshShell.CreateShortcut($ShortcutPath)
$Shortcut.TargetPath = "$SyncFolder\service-startup.bat"
$Shortcut.WorkingDirectory = $SyncFolder
$Shortcut.WindowStyle = 7  # Minimized
$Shortcut.Save()

Write-Host "   ✅ Added to Windows Startup folder (backup protection)" -ForegroundColor Green

# =====================================================================
# ENHANCED VERIFICATION & MONITORING
# =====================================================================
Write-Host "📊 Step 10: Enhanced verification..." -ForegroundColor Cyan

Write-Host "   🔄 Starting bulletproof sync service..." -ForegroundColor Yellow
Start-ScheduledTask -TaskName $TaskName

Start-Sleep -Seconds 5

$TaskInfo = Get-ScheduledTask -TaskName $TaskName | Get-ScheduledTaskInfo
Write-Host "   ✅ Task Status: $($TaskInfo.LastTaskResult)" -ForegroundColor Green
Write-Host "   ✅ Last Run: $($TaskInfo.LastRunTime)" -ForegroundColor Green

# =====================================================================
# STEP 11: ADVANCED PROCESS MONITOR (PM2-STYLE)
# =====================================================================
Write-Host "🛡️  Step 11: Creating advanced process monitor..." -ForegroundColor Cyan

# Create PowerShell-based process monitor (like PM2)
$MonitorScript = @"
# SmartOffice Sync Process Monitor (PM2-style)
# Monitors and auto-restarts the sync process if it crashes

`$LogFile = "C:\SmartOfficeSync\monitor.log"
`$ProcessName = "node"
`$ScriptPath = "C:\SmartOfficeSync\office-sync-script.js"
`$CheckInterval = 30  # Check every 30 seconds

function Write-Log {
    param([string]`$Message)
    `$Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    `$LogEntry = "[`$Timestamp] `$Message"
    Add-Content -Path `$LogFile -Value `$LogEntry
    Write-Host `$LogEntry
}

Write-Log "=== Process Monitor Started ==="
Write-Log "Monitoring: node.exe office-sync-script.js"
Write-Log "Check interval: `$CheckInterval seconds"

while (`$true) {
    # Check if our sync process is running
    `$SyncProcess = Get-Process -Name `$ProcessName -ErrorAction SilentlyContinue | 
                    Where-Object { `$_.CommandLine -like "*office-sync-script.js*" }
    
    if (-not `$SyncProcess) {
        Write-Log "⚠️  ALERT: Sync process not running! Restarting..."
        
        # Kill any zombie node processes
        Get-Process -Name `$ProcessName -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 2
        
        # Start the sync process
        try {
            `$Process = Start-Process -FilePath "node.exe" ``
                                     -ArgumentList "`$ScriptPath --daemon" ``
                                     -WorkingDirectory "C:\SmartOfficeSync" ``
                                     -WindowStyle Hidden ``
                                     -PassThru
            
            Write-Log "✅ Sync process restarted (PID: `$(`$Process.Id))"
        } catch {
            Write-Log "❌ Failed to restart: `$(`$_.Exception.Message)"
        }
    } else {
        Write-Log "✅ Sync process is running (PID: `$(`$SyncProcess.Id))"
    }
    
    # Wait before next check
    Start-Sleep -Seconds `$CheckInterval
}
"@

$MonitorScript | Out-File -FilePath "$SyncFolder\process-monitor.ps1" -Encoding UTF8
Write-Host "   ✅ Created: process-monitor.ps1 (PM2-style monitor)" -ForegroundColor Green

# Create monitor startup batch file
$MonitorBatch = @"
@echo off
echo [%date% %time%] Starting Process Monitor... >> C:\SmartOfficeSync\monitor.log
powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File "C:\SmartOfficeSync\process-monitor.ps1"
"@

$MonitorBatch | Out-File -FilePath "$SyncFolder\start-monitor.bat" -Encoding ASCII
Write-Host "   ✅ Created: start-monitor.bat" -ForegroundColor Green

# Create scheduled task for the monitor
Write-Host "   🔄 Creating monitor scheduled task..." -ForegroundColor Yellow

$MonitorTaskName = "SmartOfficeSync-Monitor"
try {
    Unregister-ScheduledTask -TaskName $MonitorTaskName -Confirm:$false -ErrorAction SilentlyContinue
} catch {}

$MonitorAction = New-ScheduledTaskAction -Execute "$SyncFolder\start-monitor.bat" -WorkingDirectory $SyncFolder
$MonitorTrigger = New-ScheduledTaskTrigger -AtStartup
$MonitorSettings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -ExecutionTimeLimit (New-TimeSpan -Hours 0)
$MonitorPrincipal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount -RunLevel Highest

Register-ScheduledTask -TaskName $MonitorTaskName -Action $MonitorAction -Trigger $MonitorTrigger -Settings $MonitorSettings -Principal $MonitorPrincipal -Description "SmartOffice Sync Process Monitor - Ensures sync is always running"

Write-Host "   ✅ Monitor task created: $MonitorTaskName" -ForegroundColor Green

# Start the monitor now
Write-Host "   🚀 Starting process monitor..." -ForegroundColor Yellow
Start-ScheduledTask -TaskName $MonitorTaskName
Start-Sleep -Seconds 2

Write-Host "   ✅ Process monitor is now running!" -ForegroundColor Green
Write-Host ""

# =====================================================================
# FINAL SUCCESS SUMMARY
# =====================================================================
Write-Host ""
Write-Host "🎊 BULLETPROOF SETUP COMPLETE!" -ForegroundColor Green
Write-Host "==============================" -ForegroundColor Green
Write-Host ""
Write-Host "✅ PROTECTION LAYERS ADDED:" -ForegroundColor Yellow
Write-Host "   1. Bulletproof startup script (auto-restart on crash)" -ForegroundColor White
Write-Host "   2. System-level scheduled task (SYSTEM privileges)" -ForegroundColor White
Write-Host "   3. Windows Startup folder shortcut (user-level backup)" -ForegroundColor White
Write-Host "   4. SmartOffice readiness check (waits for localhost:84)" -ForegroundColor White
Write-Host "   5. Network delay handling (waits 30-60 seconds after boot)" -ForegroundColor White
Write-Host "   6. Auto-restart on failure (999 attempts)" -ForegroundColor White
Write-Host "   7. Comprehensive logging (all events tracked)" -ForegroundColor White
Write-Host "   8. PM2-STYLE PROCESS MONITOR (checks every 30 seconds)" -ForegroundColor Cyan
Write-Host ""
Write-Host "📊 LOG FILES CREATED:" -ForegroundColor Yellow
Write-Host "   • C:\SmartOfficeSync\startup.log" -ForegroundColor White
Write-Host "   • C:\SmartOfficeSync\service.log" -ForegroundColor White
Write-Host "   • C:\SmartOfficeSync\sync-output.log" -ForegroundColor White
Write-Host "   • C:\SmartOfficeSync\monitor.log (NEW - Process Monitor)" -ForegroundColor Cyan
Write-Host ""
Write-Host "🔧 MANUAL COMMANDS:" -ForegroundColor Yellow
Write-Host "   Start manually: C:\SmartOfficeSync\start-sync-robust.bat" -ForegroundColor White
Write-Host "   Check logs: type C:\SmartOfficeSync\startup.log" -ForegroundColor White
Write-Host "   Monitor logs: type C:\SmartOfficeSync\monitor.log" -ForegroundColor Cyan
Write-Host "   Task status: Get-ScheduledTask -TaskName 'SmartOfficeSync' | Get-ScheduledTaskInfo" -ForegroundColor White
Write-Host "   Monitor status: Get-ScheduledTask -TaskName 'SmartOfficeSync-Monitor' | Get-ScheduledTaskInfo" -ForegroundColor Cyan
Write-Host ""
Write-Host "🎯 AFTER RESTART:" -ForegroundColor Yellow
Write-Host "   • System will wait 60 seconds for full boot" -ForegroundColor White
Write-Host "   • Will check if SmartOffice (localhost:84) is ready" -ForegroundColor White
Write-Host "   • Will start sync automatically" -ForegroundColor White
Write-Host "   • Process Monitor checks every 30 seconds" -ForegroundColor Cyan
Write-Host "   • Will restart sync IMMEDIATELY if it crashes" -ForegroundColor Cyan
Write-Host "   • Will run every 5 seconds with 15-minute employee refresh" -ForegroundColor White
Write-Host ""
Write-Host "⚠️  Important Notes:" -ForegroundColor Yellow
Write-Host ""
Write-Host "   1. RLS policy has been fixed - sync should work now!" -ForegroundColor White
Write-Host ""
Write-Host "   2. Check your data at:" -ForegroundColor White
Write-Host "      http://localhost:3000/api/admin/raw-attendance?limit=10" -ForegroundColor Gray
Write-Host ""
Write-Host "   3. The sync runs silently - no windows will pop up!" -ForegroundColor White
Write-Host ""
Write-Host "✅ YOUR SYNC IS NOW BULLETPROOF AGAINST RESTARTS!" -ForegroundColor Green

Write-Host ""
Write-Host "Press any key to exit..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
