import { NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

// UUID validation function
const isValidUuid = (uuid: string) => {
  const regex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i
  return regex.test(uuid)
}

function generatePassword(length = 12) {
  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz0123456789!@#$%'
  let password = ''
  const cryptoObj = globalThis.crypto || (globalThis as any).msCrypto
  if (cryptoObj) {
    const randomValues = new Uint32Array(length)
    cryptoObj.getRandomValues(randomValues)
    for (let i = 0; i < length; i++) {
      password += chars[randomValues[i] % chars.length]
    }
  } else {
    for (let i = 0; i < length; i++) {
      password += chars[Math.floor(Math.random() * chars.length)]
    }
  }
  return password
}

export async function POST(request: Request) {
  try {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://sxnaopzgaddvziplrlbe.supabase.co'
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN4bmFvcHpnYWRkdnppcGxybGJlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjYyNTI4NCwiZXhwIjoyMDcyMjAxMjg0fQ.0cGxdfGQhYldGHLndKqcYAtzwHjCYnAXSB1WAqRFZ9U'

    console.log('[DEBUG] Environment check:', {
      hasUrl: !!supabaseUrl,
      hasKey: !!supabaseServiceKey,
      urlLength: supabaseUrl?.length,
      keyLength: supabaseServiceKey?.length
    })

    if (!supabaseUrl || !supabaseServiceKey) {
      console.error('Missing Supabase credentials in environment variables')
      console.error('URL exists:', !!supabaseUrl)
      console.error('Service key exists:', !!supabaseServiceKey)
      return NextResponse.json({ error: 'Server configuration error' }, { status: 500 })
    }

    const maskedUrl = `${supabaseUrl.slice(0, Math.min(20, supabaseUrl.length))}…`
    const maskedKey = `${supabaseServiceKey.slice(0, 6)}…${supabaseServiceKey.slice(-4)}`
    console.info('[admin-user-password] using Supabase project', maskedUrl)
    console.info('[admin-user-password] service role key fragment', maskedKey)

    const supabase = createClient(supabaseUrl, supabaseServiceKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    })

    const { userId, action, newPassword, actorId } = await request.json()

    if (!userId) {
      return NextResponse.json({ error: 'User ID is required' }, { status: 400 })
    }

    // Validate UUID format
    if (!isValidUuid(userId)) {
      return NextResponse.json({ error: 'Invalid user ID format. Must be a valid UUID.' }, { status: 400 })
    }

    if (!action || !['generate', 'set'].includes(action)) {
      return NextResponse.json({ error: 'Invalid action' }, { status: 400 })
    }

    let passwordToSet: string

    if (action === 'generate') {
      passwordToSet = generatePassword()
    } else {
      if (!newPassword || newPassword.length < 8) {
        return NextResponse.json({ error: 'New password must be at least 8 characters' }, { status: 400 })
      }
      passwordToSet = newPassword
    }

    console.log('[DEBUG] Attempting to update password for user:', userId)
    console.log('[DEBUG] Password length:', passwordToSet.length)

    const { data: updateData, error: updateError } = await supabase.auth.admin.updateUserById(userId, {
      password: passwordToSet
    })

    console.log('[DEBUG] Update result:', { 
      success: !updateError, 
      error: updateError?.message,
      userData: updateData ? 'User data received' : 'No user data'
    })

    if (updateError) {
      console.error('Error updating user password:', updateError)
      return NextResponse.json({ 
        error: updateError.message || 'Failed to update password',
        details: updateError
      }, { status: 500 })
    }

    // Log audit trail
    await supabase.from('audit_logs').insert({
      target_id: userId,
      actor_id: actorId || null,
      action: action === 'generate' ? 'password_generate' : 'password_set',
      meta_json: {
        description:
          action === 'generate'
            ? 'Temporary password generated by admin'
            : 'Password manually set by admin'
      }
    })

    return NextResponse.json({
      success: true,
      password: action === 'generate' ? passwordToSet : undefined,
      message:
        action === 'generate'
          ? 'Temporary password generated successfully'
          : 'Password updated successfully'
    })
  } catch (error: any) {
    console.error('Unexpected error updating password:', error)
    return NextResponse.json({ error: error?.message || 'Internal server error' }, { status: 500 })
  }
}
