import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

// Use the working Supabase configuration
const supabaseUrl = 'https://sxnaopzgaddvziplrlbe.supabase.co'

// Try multiple possible service role keys
const possibleKeys = [
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN4bmFvcHpnYWRkdnppcGxybGJlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjYyNTI4NCwiZXhwIjoyMDcyMjAxMjg0fQ.0cGxdfGQhYldGHLndKqcYAtzwHjCYnAXSB1WAqRFZ9U'
].filter(Boolean)

async function testServiceKey(key: string | undefined): Promise<boolean> {
  if (!key) return false
  
  try {
    const supabase = createClient(supabaseUrl, key, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    })

    // Test admin access
    const { data, error } = await supabase.auth.admin.listUsers({ page: 1, perPage: 1 })
    
    if (error) {
      console.log(`Key failed: ${key.slice(0, 20)}... - ${error.message}`)
      return false
    }
    
    console.log(`Key works: ${key.slice(0, 20)}... - Found ${data.users.length} users`)
    return true
  } catch (error) {
    console.log(`Key error: ${key.slice(0, 20)}... - ${error}`)
    return false
  }
}

export async function POST(request: NextRequest) {
  try {
    const { userId, action, newPassword, actorId } = await request.json()

    if (!userId) {
      return NextResponse.json({ error: 'User ID is required' }, { status: 400 })
    }

    // Validate UUID format
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i
    if (!uuidRegex.test(userId)) {
      return NextResponse.json({ error: 'Invalid user ID format. Must be a valid UUID.' }, { status: 400 })
    }

    if (!action || !['generate', 'set'].includes(action)) {
      return NextResponse.json({ error: 'Invalid action' }, { status: 400 })
    }

    // Test all possible service keys
    let workingKey: string | null = null
    for (const key of possibleKeys) {
      if (key && await testServiceKey(key)) {
        workingKey = key
        break
      }
    }

    if (!workingKey) {
      return NextResponse.json({ 
        error: 'No valid service role key found',
        debug: `Tested ${possibleKeys.length} keys`
      }, { status: 500 })
    }

    // Use the working key
    const supabase = createClient(supabaseUrl, workingKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    })

    let passwordToSet: string

    if (action === 'generate') {
      // Generate password
      const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz0123456789!@#$%'
      passwordToSet = ''
      for (let i = 0; i < 12; i++) {
        passwordToSet += chars[Math.floor(Math.random() * chars.length)]
      }
    } else {
      if (!newPassword || newPassword.length < 8) {
        return NextResponse.json({ error: 'New password must be at least 8 characters' }, { status: 400 })
      }
      passwordToSet = newPassword
    }

    console.log(`[DEBUG] Updating password for user: ${userId}`)
    console.log(`[DEBUG] Using key: ${workingKey.slice(0, 20)}...`)

    const { data: updateData, error: updateError } = await supabase.auth.admin.updateUserById(userId, {
      password: passwordToSet
    })

    if (updateError) {
      console.error('Error updating user password:', updateError)
      return NextResponse.json({ 
        error: updateError.message || 'Failed to update password',
        details: updateError
      }, { status: 500 })
    }

    // Log audit trail
    try {
      await supabase.from('audit_logs').insert({
        target_id: userId,
        actor_id: actorId || null,
        action: action === 'generate' ? 'password_generate' : 'password_set',
        meta_json: {
          description: action === 'generate' 
            ? 'Temporary password generated by admin' 
            : 'Password manually set by admin'
        }
      })
    } catch (auditError) {
      console.warn('Failed to log audit trail:', auditError)
      // Don't fail the request if audit logging fails
    }

    return NextResponse.json({
      success: true,
      password: action === 'generate' ? passwordToSet : undefined,
      message: action === 'generate' 
        ? 'Temporary password generated successfully' 
        : 'Password updated successfully',
      workingKey: `${workingKey.slice(0, 20)}...` // For debugging
    })

  } catch (error: any) {
    console.error('Unexpected error updating password:', error)
    return NextResponse.json({ 
      error: error?.message || 'Internal server error',
      stack: error?.stack
    }, { status: 500 })
  }
}

// Test endpoint
export async function GET() {
  const results = []
  
  for (const key of possibleKeys) {
    if (key) {
      const works = await testServiceKey(key)
      results.push({
        key: `${key.slice(0, 20)}...`,
        works
      })
    }
  }

  return NextResponse.json({
    message: 'Service key test results',
    results,
    totalKeys: possibleKeys.length
  })
}
