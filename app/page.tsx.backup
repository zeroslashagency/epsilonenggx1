"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import ProtectedRoute from "@/app/components/protected-route"
import { useAuth } from "@/app/contexts/auth-context"
import {
  Calendar,
  Clock,
  Settings,
  BarChart3,
  AlertCircle,
  CheckCircle2,
  PlayCircle,
  TrendingUp,
  LogOut,
  Cog,
  User,
  Factory,
  Home,
  Users,
  Wrench,
  FileText,
  Bell,
  Search,
  Plus,
  RefreshCw,
  Save,
  Download,
  Shield,
  Activity,
  Menu
} from "lucide-react"

export default function MainDashboard() {
  const [sidebarOpen, setSidebarOpen] = useState(true)
  const [activeSection, setActiveSection] = useState("dashboard")
  const [dashboardData, setDashboardData] = useState({
    activeOrders: 0,
    machinesRunning: 0,
    totalMachines: 10,
    utilizationRate: 0,
    onSchedule: 0,
    alerts: 0,
    alertDetails: '',
    statusCounts: {
      notStarted: 0,
      inProgress: 0,
      onHold: 0,
      completed: 0
    },
    machines: [],
    tasks: [] as any[],
    isLoading: true
  })
  
  // Attendance data state
  const [attendanceData, setAttendanceData] = useState<any>(null)
  const [isAttendanceLoading, setIsAttendanceLoading] = useState(true)
  
  const { userEmail, logout } = useAuth()
  const router = useRouter()

  // Load dashboard data from Supabase
  useEffect(() => {
    const loadDashboardData = async () => {
      try {
        setDashboardData((prev: any) => ({ ...prev, isLoading: true }))
        
        const response = await fetch('/api/sync-dashboard')
        if (response.ok) {
          const result = await response.json()
          if (result.success && result.data && result.data.chartData) {
            const chartData = result.data.chartData
            const tasks = chartData.tasks || []
            
            const uniqueOrders = new Set(tasks.map((task: any) => task.partNumber)).size
            const activeMachines = new Set(tasks.map((task: any) => task.machine)).size
            const totalScheduledTasks = tasks.length
            const totalCapacity = 10 * 8
            const onScheduleRate = totalCapacity > 0 ? Math.round((totalScheduledTasks / totalCapacity) * 100) : 0
            
            const statusCounts = {
              notStarted: tasks.filter((task: any) => task.status === 'not-started').length,
              inProgress: tasks.filter((task: any) => task.status === 'in-progress').length,
              onHold: tasks.filter((task: any) => task.status === 'on-hold').length,
              completed: tasks.filter((task: any) => task.status === 'completed').length
            }
            
            const now = new Date()
            const delayedTasks = tasks.filter((task: any) => {
              const endTime = new Date(task.endTime)
              return endTime < now
            }).length
            
            const maintenanceAlerts = 1
            const totalAlerts = delayedTasks + maintenanceAlerts
            
            const alertDetails = totalAlerts > 0 ? 
              `${delayedTasks > 0 ? delayedTasks + ' delay' + (delayedTasks > 1 ? 's' : '') : ''}${delayedTasks > 0 && maintenanceAlerts > 0 ? ', ' : ''}${maintenanceAlerts > 0 ? maintenanceAlerts + ' maintenance' : ''}` : 
              'No active alerts'
            
            setDashboardData({
              activeOrders: uniqueOrders,
              machinesRunning: activeMachines,
              totalMachines: 10,
              utilizationRate: Math.round((activeMachines / 10) * 100),
              onSchedule: onScheduleRate,
              alerts: totalAlerts,
              alertDetails,
              statusCounts,
              machines: [],
              tasks: tasks,
              isLoading: false
            })
          } else {
            setDashboardData((prev: any) => ({ ...prev, isLoading: false }))
          }
        }
      } catch (error) {
        console.error('Error loading dashboard data:', error)
        setDashboardData((prev: any) => ({ ...prev, isLoading: false }))
      }
    }

    loadDashboardData()
  }, [])

  // Redirect to auth if not authenticated
  useEffect(() => {
    const checkAuth = () => {
      const isAuthenticated = localStorage.getItem('isAuthenticated')
      if (!isAuthenticated || isAuthenticated !== 'true') {
        router.push('/auth')
      }
    }
    checkAuth()
  }, [router])

  // Fetch today's attendance data
  useEffect(() => {
    const fetchTodayAttendance = async () => {
      try {
        setIsAttendanceLoading(true)
        const response = await fetch('/api/get-attendance?dateRange=today')
        if (response.ok) {
          const result = await response.json()
          if (result.success) {
            setAttendanceData(result.data)
          }
        }
      } catch (error) {
        console.error('Error fetching today attendance:', error)
      } finally {
        setIsAttendanceLoading(false)
      }
    }
    fetchTodayAttendance()
  }, [])

  const sidebarItems = [
    {
      category: "Main",
      items: [
        { id: "dashboard", label: "Dashboard", icon: Home, active: true },
        { id: "schedule-generator", label: "Schedule Generator", icon: Settings },
        { id: "chart", label: "Chart", icon: BarChart3 },
        { id: "analytics", label: "Analytics", icon: TrendingUp },
        { id: "attendance", label: "Attendance", icon: Users },
      ]
    },
    {
      category: "Production",
      items: [
        { id: "orders", label: "Orders", icon: FileText },
        { id: "machines", label: "Machines", icon: Factory },
        { id: "personnel", label: "Personnel", icon: Users },
        { id: "tasks", label: "Tasks", icon: CheckCircle2 },
      ]
    },
    {
      category: "Monitoring",
      items: [
        { id: "alerts", label: "Alerts", icon: Bell },
        { id: "reports", label: "Reports", icon: FileText },
        { id: "quality", label: "Quality Control", icon: Shield },
        { id: "maintenance", label: "Maintenance", icon: Wrench },
      ]
    },
    {
      category: "System",
      items: [
        { id: "settings", label: "Settings", icon: Cog },
        { id: "account", label: "Account", icon: User },
        { id: "logout", label: "Logout", icon: LogOut },
      ]
    }
  ]

  const handleSidebarItemClick = (itemId: string) => {
    if (itemId === "logout") {
      logout()
      return
    }
    
    if (itemId === "schedule-generator") {
      router.push('/scheduler')
      return
    }
    
    if (itemId === "chart") {
      router.push('/chart')
      return
    }
    
    if (itemId === "analytics") {
      router.push('/schedule-dashboard')
      return
    }
    
    setActiveSection(itemId)
  }

  const renderDashboardContent = () => {
    switch (activeSection) {
      case "dashboard":
        return renderMainDashboard()
      case "attendance":
        return renderAttendanceView(attendanceData, isAttendanceLoading)
      case "orders":
        return renderOrdersView()
      case "machines":
        return renderMachinesView()
      case "personnel":
        return renderPersonnelView()
      case "tasks":
        return renderTasksView()
      case "alerts":
        return renderAlertsView()
      case "reports":
        return renderReportsView()
      case "quality":
        return renderQualityView()
      case "maintenance":
        return renderMaintenanceView()
      case "settings":
        return renderSettingsView()
      case "account":
        return renderAccountView()
      default:
        return renderMainDashboard()
    }
  }

  const renderMainDashboard = () => (
    <div className="space-y-6">
      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-blue-800">Active Orders</CardTitle>
            <PlayCircle className="h-4 w-4 text-blue-600" />
            </CardHeader>
            <CardContent>
            <div className="text-2xl font-bold text-blue-900">
              {dashboardData.isLoading ? '...' : dashboardData.activeOrders}
            </div>
            <p className="text-xs text-blue-700">
                <TrendingUp className="inline w-3 h-3 mr-1" />
              {dashboardData.isLoading ? 'Loading...' : 'Active orders from scheduling'}
              </p>
            </CardContent>
          </Card>

        <Card className="bg-gradient-to-br from-green-50 to-green-100 border-green-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-green-800">Machines Running</CardTitle>
            <Activity className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
            <div className="text-2xl font-bold text-green-900">
              {dashboardData.isLoading ? '...' : `${dashboardData.machinesRunning}/${dashboardData.totalMachines}`}
            </div>
            <p className="text-xs text-green-700">
              {dashboardData.isLoading ? 'Loading...' : `${dashboardData.utilizationRate}% utilization rate`}
            </p>
            </CardContent>
          </Card>

        <Card className="bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-purple-800">On Schedule</CardTitle>
            <CheckCircle2 className="h-4 w-4 text-purple-600" />
            </CardHeader>
            <CardContent>
            <div className="text-2xl font-bold text-purple-900">
              {dashboardData.isLoading ? '...' : `${dashboardData.onSchedule}%`}
            </div>
            <p className="text-xs text-purple-700">
              {dashboardData.isLoading ? 'Loading...' : `Completion rate from scheduling`}
            </p>
            </CardContent>
          </Card>

        <Card className="bg-gradient-to-br from-red-50 to-red-100 border-red-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-red-800">Alerts</CardTitle>
            <AlertCircle className="h-4 w-4 text-red-600" />
            </CardHeader>
            <CardContent>
            <div className="text-2xl font-bold text-red-900">
              {dashboardData.isLoading ? '...' : dashboardData.alerts}
            </div>
            <p className="text-xs text-red-700">
              {dashboardData.isLoading ? 'Loading...' : dashboardData.alertDetails}
            </p>
            </CardContent>
          </Card>
        </div>

      {/* Production Timeline */}
      <Card className="bg-white border border-gray-200 shadow-sm">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
              <CardTitle className="text-xl text-gray-900">Production Timeline</CardTitle>
                    <CardDescription>Real-time view of machine scheduling and operations</CardDescription>
                  </div>
                  <div className="flex items-center gap-2">
              <Badge className="bg-green-100 text-green-800 border-green-200">Live</Badge>
                    <Button variant="outline" size="sm">
                <RefreshCw className="w-4 h-4 mr-2" />
                      Refresh
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
          <div className="space-y-6">
            {/* Order Completion Table */}
            <div className="overflow-x-auto">
              <table className="w-full border-collapse">
                <thead>
                  <tr className="border-b border-gray-200">
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Order ID</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Part Number</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Status</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Start Date</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Expected End</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Progress</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Machine</th>
                  </tr>
                </thead>
                <tbody>
                  {dashboardData.isLoading ? (
                    <tr>
                      <td colSpan={7} className="text-center py-8 text-gray-500">Loading orders...</td>
                    </tr>
                  ) : (
                    dashboardData.tasks?.slice(0, 10).map((task: any, index: number) => (
                      <tr key={task.id || index} className="border-b border-gray-100 hover:bg-gray-50">
                        <td className="py-3 px-4 text-sm font-medium text-gray-900">
                          ORD-{String(index + 1).padStart(3, '0')}
                        </td>
                        <td className="py-3 px-4 text-sm text-gray-600">
                          {task.partNumber || `PN${1000 + index}`}
                        </td>
                        <td className="py-3 px-4">
                          <Badge 
                            variant="outline" 
                            className={
                              task.status === 'completed' ? 'bg-green-100 text-green-800 border-green-200' :
                              task.status === 'in-progress' ? 'bg-blue-100 text-blue-800 border-blue-200' :
                              task.status === 'on-hold' ? 'bg-red-100 text-red-800 border-red-200' :
                              'bg-gray-100 text-gray-800 border-gray-200'
                            }
                          >
                            {task.status === 'completed' ? 'Completed' :
                             task.status === 'in-progress' ? 'In Progress' :
                             task.status === 'on-hold' ? 'On Hold' :
                             'Not Started'}
                        </Badge>
                        </td>
                        <td className="py-3 px-4 text-sm text-gray-600">
                          {task.startTime ? new Date(task.startTime).toLocaleDateString() : 'TBD'}
                        </td>
                        <td className="py-3 px-4 text-sm text-gray-600">
                          {task.endTime ? new Date(task.endTime).toLocaleDateString() : 'TBD'}
                        </td>
                        <td className="py-3 px-4 text-sm">
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div 
                              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                              style={{ 
                                width: task.status === 'completed' ? '100%' :
                                       task.status === 'in-progress' ? '65%' :
                                       task.status === 'on-hold' ? '30%' : '0%'
                              }}
                            ></div>
                          </div>
                        </td>
                        <td className="py-3 px-4 text-sm text-gray-600">
                          {task.machine?.replace('vmc', 'VMC ') || `VMC ${(index % 10) + 1}`}
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
                      </div>

            {/* Charts Section */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Machine Utilization Chart */}
              <Card className="bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200">
                <CardHeader>
                  <CardTitle className="text-lg text-blue-900">Machine Utilization</CardTitle>
                  <CardDescription className="text-blue-700">Current machine capacity usage</CardDescription>
                </CardHeader>
                <CardContent>
                      <div className="space-y-4">
                    {Array.from({ length: 5 }, (_, i) => {
                      const utilization = Math.floor(Math.random() * 40 + 60)
                      return (
                        <div key={i} className="space-y-2">
                          <div className="flex justify-between text-sm">
                            <span className="font-medium text-blue-900">VMC {i + 1}</span>
                            <span className="text-blue-700">{utilization}%</span>
                                </div>
                          <div className="w-full bg-blue-200 rounded-full h-3">
                            <div
                              className="bg-blue-600 h-3 rounded-full transition-all duration-300"
                              style={{ width: `${utilization}%` }}
                            ></div>
                                </div>
                              </div>
                      )
                    })}
                  </div>
                </CardContent>
              </Card>

              {/* Production Efficiency Chart */}
              <Card className="bg-gradient-to-br from-green-50 to-emerald-50 border-green-200">
                <CardHeader>
                  <CardTitle className="text-lg text-green-900">Production Efficiency</CardTitle>
                  <CardDescription className="text-green-700">Weekly performance metrics</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-64 bg-gradient-to-br from-green-100 to-emerald-100 rounded-lg flex items-center justify-center">
                    <div className="text-center">
                      <BarChart3 className="w-12 h-12 text-green-600 mx-auto mb-4" />
                      <p className="text-green-800 font-medium">Production Efficiency Chart</p>
                      <p className="text-green-600 text-sm">Real-time performance visualization</p>
                            </div>
                          </div>
                </CardContent>
              </Card>
            </div>

            {/* Wave Visualization */}
            <Card className="bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
              <CardHeader>
                <CardTitle className="text-lg text-purple-900">Production Flow</CardTitle>
                <CardDescription className="text-purple-700">Real-time production wave visualization</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-48 bg-gradient-to-r from-purple-100 via-pink-100 to-purple-100 rounded-lg relative overflow-hidden">
                  {/* Wave animation */}
                  <div className="absolute inset-0 flex items-center justify-center">
                    <div className="flex items-end space-x-1">
                      {Array.from({ length: 20 }, (_, i) => (
                        <div
                          key={i}
                          className="bg-gradient-to-t from-purple-400 to-pink-400 rounded-t"
                          style={{
                            width: '8px',
                            height: `${Math.random() * 60 + 20}px`,
                            animation: `wave 2s ease-in-out ${i * 0.1}s infinite alternate`
                          }}
                        ></div>
                      ))}
                    </div>
                  </div>
                  <div className="absolute bottom-4 left-4 text-purple-800 font-medium">
                    Production Flow: {dashboardData.activeOrders} Active Orders
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </CardContent>
      </Card>
    </div>
  )

  const renderAttendanceView = (attendanceData: any, isLoading: boolean) => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Today's Attendance</h2>
          <p className="text-gray-600">Current day attendance overview</p>
        </div>
        <div className="flex gap-2">
          <Button 
            onClick={() => window.location.href = '/attendance'}
            className="bg-purple-600 hover:bg-purple-700"
          >
            <Users className="w-4 h-4 mr-2" />
            View Historical Data
          </Button>
        </div>
      </div>
      
      {/* Today's Attendance Summary Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="bg-gradient-to-br from-green-50 to-green-100 border-green-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-green-800">Present Today</CardTitle>
            <Users className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-900">
              {isLoading ? '...' : (attendanceData?.summary?.presentToday || 0)}
            </div>
            <p className="text-xs text-green-700">Employees currently in office</p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-red-50 to-red-100 border-red-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-red-800">Absent Today</CardTitle>
            <Users className="h-4 w-4 text-red-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-900">
              {isLoading ? '...' : (attendanceData?.summary?.absentToday || 0)}
            </div>
            <p className="text-xs text-red-700">Employees not checked in</p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-blue-800">Total Employees</CardTitle>
            <Users className="h-4 w-4 text-blue-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-900">
              {isLoading ? '...' : (attendanceData?.summary?.totalEmployees || 0)}
            </div>
            <p className="text-xs text-blue-700">Registered staff</p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-yellow-50 to-yellow-100 border-yellow-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-yellow-800">Late Arrivals</CardTitle>
            <Clock className="h-4 w-4 text-yellow-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-yellow-900">
              {isLoading ? '...' : (attendanceData?.summary?.lateArrivals || 0)}
            </div>
            <p className="text-xs text-yellow-700">After 9:00 AM</p>
          </CardContent>
        </Card>
      </div>

      {/* Quick Actions */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Quick Actions</CardTitle>
            <CardDescription>Common attendance management tasks</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <Button 
                onClick={() => window.location.href = '/attendance'}
                className="w-full justify-start"
                variant="outline"
              >
                <Users className="w-4 h-4 mr-2" />
                View Historical Data (2020-2025)
              </Button>
              <Button 
                onClick={() => fetch('/api/sync-attendance', { method: 'POST' })}
                className="w-full justify-start"
                variant="outline"
              >
                <RefreshCw className="w-4 h-4 mr-2" />
                Sync from SmartOffice
              </Button>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Today's Activity</CardTitle>
            <CardDescription>Current day attendance activities</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {isLoading ? (
                <div className="text-center py-8 text-gray-500">
                  <Users className="w-12 h-12 mx-auto mb-2 opacity-50 animate-pulse" />
                  <p>Loading attendance data...</p>
                </div>
              ) : attendanceData?.recentLogs && attendanceData.recentLogs.length > 0 ? (
                <div className="space-y-2 max-h-64 overflow-y-auto">
                  {attendanceData.recentLogs.slice(0, 5).map((log: any, index: number) => (
                    <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                          <span className="text-sm font-medium text-blue-700">
                            {log.employee_name?.charAt(0) || '?'}
                          </span>
                        </div>
                        <div>
                          <p className="text-sm font-medium">{log.employee_name || `Employee ${log.employee_code}`}</p>
                          <p className="text-xs text-gray-500">#{log.employee_code}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                          log.punch_direction === 'in' 
                            ? 'bg-green-100 text-green-800' 
                            : 'bg-red-100 text-red-800'
                        }`}>
                          {log.punch_direction}
                        </span>
                        <p className="text-xs text-gray-500 mt-1">
                          {new Date(log.log_date).toLocaleTimeString('en-US', { 
                            hour: '2-digit', 
                            minute: '2-digit',
                            hour12: true 
                          })}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  <Users className="w-12 h-12 mx-auto mb-2 opacity-50" />
                  <p>No attendance data for today</p>
                  <p className="text-sm">Connect SmartOffice device to see current data</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
    )
  }

  const renderOrdersView = () => (
    <div className="space-y-6">
                    <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Orders Management</h2>
          <p className="text-gray-600">Manage production orders and scheduling</p>
        </div>
        <Button className="bg-blue-600 hover:bg-blue-700">
          <Plus className="w-4 h-4 mr-2" />
          New Order
        </Button>
                    </div>
      
      <Card>
        <CardHeader>
          <CardTitle>Active Orders</CardTitle>
          <CardDescription>Current production orders and their status</CardDescription>
                  </CardHeader>
        <CardContent>
          <div className="text-center py-12">
            <FileText className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Orders View</h3>
            <p className="text-gray-600">Detailed orders management interface will be implemented here</p>
          </div>
        </CardContent>
      </Card>
    </div>
  )

  const renderMachinesView = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Machine Management</h2>
          <p className="text-gray-600">Monitor and manage production machines</p>
        </div>
        <Button className="bg-green-600 hover:bg-green-700">
          <Settings className="w-4 h-4 mr-2" />
          Machine Settings
        </Button>
                      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>Machine Status</CardTitle>
          <CardDescription>Real-time machine monitoring and control</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center py-12">
            <Factory className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Machines View</h3>
            <p className="text-gray-600">Detailed machine management interface will be implemented here</p>
                      </div>
                  </CardContent>
                </Card>
            </div>
  )

  const renderPersonnelView = () => (
            <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Personnel Management</h2>
          <p className="text-gray-600">Manage operators and personnel assignments</p>
        </div>
        <Button className="bg-purple-600 hover:bg-purple-700">
          <Users className="w-4 h-4 mr-2" />
          Add Personnel
        </Button>
      </div>
      
      <Card>
                    <CardHeader>
          <CardTitle>Active Personnel</CardTitle>
          <CardDescription>Current operator assignments and performance</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center py-12">
            <Users className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Personnel View</h3>
            <p className="text-gray-600">Detailed personnel management interface will be implemented here</p>
          </div>
        </CardContent>
      </Card>
    </div>
  )

  const renderTasksView = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Task Management</h2>
          <p className="text-gray-600">Monitor and manage production tasks</p>
        </div>
        <Button className="bg-orange-600 hover:bg-orange-700">
          <CheckCircle2 className="w-4 h-4 mr-2" />
          New Task
        </Button>
                      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>Active Tasks</CardTitle>
          <CardDescription>Current task assignments and progress</CardDescription>
                    </CardHeader>
                    <CardContent>
          <div className="text-center py-12">
            <CheckCircle2 className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Tasks View</h3>
            <p className="text-gray-600">Detailed task management interface will be implemented here</p>
          </div>
        </CardContent>
      </Card>
    </div>
  )

  const renderAlertsView = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Alert Center</h2>
          <p className="text-gray-600">System alerts and notifications</p>
        </div>
        <Button className="bg-red-600 hover:bg-red-700">
          <Bell className="w-4 h-4 mr-2" />
          Alert Settings
        </Button>
                          </div>
      
      <Card>
        <CardHeader>
          <CardTitle>System Alerts</CardTitle>
          <CardDescription>Current system alerts and notifications</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center py-12">
            <Bell className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Alerts View</h3>
            <p className="text-gray-600">Detailed alerts management interface will be implemented here</p>
                      </div>
                    </CardContent>
                  </Card>
    </div>
  )

  const renderReportsView = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Reports & Analytics</h2>
          <p className="text-gray-600">Generate and view production reports</p>
        </div>
        <Button className="bg-indigo-600 hover:bg-indigo-700">
          <Download className="w-4 h-4 mr-2" />
          Export Report
        </Button>
            </div>

      <Card>
                <CardHeader>
          <CardTitle>Production Reports</CardTitle>
          <CardDescription>Detailed production analytics and reports</CardDescription>
                </CardHeader>
                <CardContent>
          <div className="text-center py-12">
            <FileText className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Reports View</h3>
            <p className="text-gray-600">Detailed reports interface will be implemented here</p>
          </div>
        </CardContent>
      </Card>
    </div>
  )

  const renderQualityView = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Quality Control</h2>
          <p className="text-gray-600">Monitor product quality and standards</p>
        </div>
        <Button className="bg-teal-600 hover:bg-teal-700">
          <Shield className="w-4 h-4 mr-2" />
          Quality Settings
        </Button>
                    </div>
      
      <Card>
        <CardHeader>
          <CardTitle>Quality Metrics</CardTitle>
          <CardDescription>Product quality monitoring and control</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center py-12">
            <Shield className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Quality View</h3>
            <p className="text-gray-600">Detailed quality control interface will be implemented here</p>
                  </div>
                </CardContent>
              </Card>
    </div>
  )

  const renderMaintenanceView = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Maintenance</h2>
          <p className="text-gray-600">Schedule and track machine maintenance</p>
        </div>
        <Button className="bg-yellow-600 hover:bg-yellow-700">
          <Wrench className="w-4 h-4 mr-2" />
          Schedule Maintenance
        </Button>
      </div>
      
      <Card>
                <CardHeader>
          <CardTitle>Maintenance Schedule</CardTitle>
          <CardDescription>Machine maintenance tracking and scheduling</CardDescription>
                </CardHeader>
                <CardContent>
          <div className="text-center py-12">
            <Wrench className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Maintenance View</h3>
            <p className="text-gray-600">Detailed maintenance interface will be implemented here</p>
          </div>
        </CardContent>
      </Card>
                        </div>
  )

  const renderSettingsView = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">System Settings</h2>
          <p className="text-gray-600">Configure system preferences and settings</p>
                        </div>
        <Button className="bg-gray-600 hover:bg-gray-700">
          <Save className="w-4 h-4 mr-2" />
          Save Settings
        </Button>
                      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>System Configuration</CardTitle>
          <CardDescription>Configure system settings and preferences</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center py-12">
            <Cog className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Settings View</h3>
            <p className="text-gray-600">Detailed settings interface will be implemented here</p>
                  </div>
                </CardContent>
              </Card>
            </div>
  )

  const renderAccountView = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Account Management</h2>
          <p className="text-gray-600">Manage your account and profile</p>
        </div>
        <Button className="bg-blue-600 hover:bg-blue-700">
          <User className="w-4 h-4 mr-2" />
          Edit Profile
        </Button>
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>Account Information</CardTitle>
          <CardDescription>Your account details and preferences</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center py-12">
            <User className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Account View</h3>
            <p className="text-gray-600">Detailed account management interface will be implemented here</p>
          </div>
        </CardContent>
      </Card>
    </div>
  )

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-gray-50 flex">
        {/* Sidebar */}
        <div className={`${sidebarOpen ? 'w-64' : 'w-16'} bg-white shadow-lg transition-all duration-300 flex flex-col`}>
          {/* Logo */}
          <div className="p-4 border-b border-gray-200">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 flex items-center justify-center">
                <img 
                  src="/Epsilologo.svg" 
                  alt="Epsilon Logo" 
                  className="w-8 h-8"
                />
              </div>
              {sidebarOpen && (
                <div>
                  <h1 className="text-lg font-bold text-gray-900">Epsilon</h1>
                  <p className="text-xs text-gray-600">Production System</p>
                </div>
              )}
            </div>
          </div>

          {/* Navigation */}
          <div className="flex-1 overflow-y-auto py-4">
            {sidebarItems.map((section) => (
              <div key={section.category} className="mb-6">
                {sidebarOpen && (
                  <h3 className="px-4 text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2">
                    {section.category}
                  </h3>
                )}
                <div className="space-y-1">
                  {section.items.map((item) => {
                    const Icon = item.icon
                    const isActive = activeSection === item.id
                    return (
                      <button
                        key={item.id}
                        onClick={() => handleSidebarItemClick(item.id)}
                        className={`w-full flex items-center gap-3 px-4 py-2 text-sm font-medium transition-colors ${
                          isActive
                            ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700'
                            : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                        }`}
                      >
                        <Icon className="w-5 h-5 flex-shrink-0" />
                        {sidebarOpen && <span>{item.label}</span>}
                      </button>
                    )
                  })}
                </div>
              </div>
            ))}
          </div>

          {/* User Info */}
          <div className="p-4 border-t border-gray-200">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                <User className="w-4 h-4 text-gray-600" />
              </div>
              {sidebarOpen && (
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium text-gray-900 truncate">
                    {userEmail || 'User'}
                  </p>
                  <p className="text-xs text-gray-500">Administrator</p>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="flex-1 flex flex-col overflow-hidden">
          {/* Top Bar */}
          <header className="bg-white border-b border-gray-200 px-6 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setSidebarOpen(!sidebarOpen)}
                  className="p-2"
                >
                  <Menu className="w-5 h-5" />
                </Button>
                <div>
                  <h1 className="text-xl font-semibold text-gray-900">
                    {sidebarItems.flatMap(s => s.items).find(item => item.id === activeSection)?.label || 'Dashboard'}
                  </h1>
                  <p className="text-sm text-gray-600">
                    {userEmail && `Welcome back, ${userEmail}`}
                  </p>
                </div>
              </div>
              
              <div className="flex items-center gap-3">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Search..."
                    className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                
                <Button variant="ghost" size="sm" className="relative">
                  <Bell className="w-5 h-5" />
                  {dashboardData.alerts > 0 && (
                    <span className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                      {dashboardData.alerts}
                    </span>
                  )}
                </Button>
                
                <Button variant="ghost" size="sm">
                  <Settings className="w-5 h-5" />
                </Button>
              </div>
            </div>
          </header>

          {/* Content Area */}
          <main className="flex-1 overflow-y-auto p-6">
            {renderDashboardContent()}
          </main>
        </div>
      </div>

      {/* Wave Animation CSS */}
      <style jsx>{`
        @keyframes wave {
          0% { transform: scaleY(1); }
          100% { transform: scaleY(1.2); }
        }
      `}</style>
    </ProtectedRoute>
  )
}
